{"ast":null,"code":"var _jsxFileName = \"/Users/harsha1/Documents/OSS-Engine/frontend/src/pages/MainPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport FilterPanel from \"../components/FilterPanel\";\nimport ResultsList from \"../components/ResultsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst languageOptions = [\"Python\", \"JavaScript\", \"Java\", \"Kotlin\", \"C++\", \"TypeScript\", \"Go\", \"Ruby\"];\nconst topicOptions = [\"machine-learning\", \"android\", \"web\", \"devops\", \"data-science\", \"security\", \"mobile\"];\nconst initialFilters = {\n  keywords: \"\",\n  language: \"\",\n  topics: [],\n  minGoodFirstIssues: 0,\n  maxGoodFirstIssues: 1000,\n  recentCommitDays: 90\n};\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || \"\";\nconst MainPage = () => {\n  _s();\n  const [filters, setFilters] = useState(initialFilters);\n  const [repos, setRepos] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const handleSearch = searchFilters => {\n    console.log(\"Starting search with filters:\", searchFilters);\n    console.log(\"Backend URL:\", BACKEND_URL);\n    setLoading(true);\n    fetch(`${BACKEND_URL}/search_and_score`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        keywords: searchFilters.keywords,\n        language: searchFilters.language,\n        topics: searchFilters.topics,\n        min_good_first_issues: searchFilters.minGoodFirstIssues,\n        max_good_first_issues: searchFilters.maxGoodFirstIssues,\n        recent_commit_days: searchFilters.recentCommitDays\n      })\n    }).then(res => {\n      console.log(\"Received response with status:\", res.status);\n      if (!res.ok) {\n        throw new Error(`HTTP error ${res.status} - ${res.statusText}`);\n      }\n      return res.json();\n    }).then(data => {\n      console.log(\"Search successful, received data:\", data);\n      setRepos(data);\n    }).catch(error => {\n      console.error(\"Search API error:\", error);\n      setRepos([]);\n    }).finally(() => {\n      console.log(\"Search completed\");\n      setLoading(false);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-page\",\n    children: [/*#__PURE__*/_jsxDEV(FilterPanel, {\n      filters: filters,\n      onFiltersChange: setFilters,\n      onSearchClick: handleSearch,\n      languageOptions: languageOptions,\n      topicOptions: topicOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultsList, {\n      repos: repos,\n      loading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(MainPage, \"7yPfVbUc6tTwKFG7vYir65opZfQ=\");\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","FilterPanel","ResultsList","jsxDEV","_jsxDEV","languageOptions","topicOptions","initialFilters","keywords","language","topics","minGoodFirstIssues","maxGoodFirstIssues","recentCommitDays","BACKEND_URL","process","env","REACT_APP_BACKEND_URL","MainPage","_s","filters","setFilters","repos","setRepos","loading","setLoading","handleSearch","searchFilters","console","log","fetch","method","headers","body","JSON","stringify","min_good_first_issues","max_good_first_issues","recent_commit_days","then","res","status","ok","Error","statusText","json","data","catch","error","finally","className","children","onFiltersChange","onSearchClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/harsha1/Documents/OSS-Engine/frontend/src/pages/MainPage.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport FilterPanel, { Filters } from \"../components/FilterPanel\";\nimport ResultsList from \"../components/ResultsList\";\n\nconst languageOptions = [\"Python\", \"JavaScript\", \"Java\", \"Kotlin\", \"C++\", \"TypeScript\", \"Go\", \"Ruby\"];\nconst topicOptions = [\"machine-learning\", \"android\", \"web\", \"devops\", \"data-science\", \"security\", \"mobile\"];\n\nconst initialFilters: Filters = {\n  keywords: \"\",\n  language: \"\",\n  topics: [],\n  minGoodFirstIssues: 0,\n  maxGoodFirstIssues: 1000,\n  recentCommitDays: 90,\n};\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || \"\";\n\nconst MainPage: React.FC = () => {\n  const [filters, setFilters] = useState<Filters>(initialFilters);\n  const [repos, setRepos] = useState<any[]>([]);\n  const [loading, setLoading] = useState(false);\n\n  const handleSearch = (searchFilters: Filters) => {\n    console.log(\"Starting search with filters:\", searchFilters);\n    console.log(\"Backend URL:\", BACKEND_URL);\n    setLoading(true);\n    fetch(`${BACKEND_URL}/search_and_score`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        keywords: searchFilters.keywords,\n        language: searchFilters.language,\n        topics: searchFilters.topics,\n        min_good_first_issues: searchFilters.minGoodFirstIssues,\n        max_good_first_issues: searchFilters.maxGoodFirstIssues,\n        recent_commit_days: searchFilters.recentCommitDays,\n      }),\n    })\n      .then((res) => {\n        console.log(\"Received response with status:\", res.status);\n        if (!res.ok) {\n          throw new Error(`HTTP error ${res.status} - ${res.statusText}`);\n        }\n        return res.json();\n      })\n      .then((data) => {\n        console.log(\"Search successful, received data:\", data);\n        setRepos(data);\n      })\n      .catch((error) => {\n        console.error(\"Search API error:\", error);\n        setRepos([]);\n      })\n      .finally(() => {\n        console.log(\"Search completed\");\n        setLoading(false);\n      });\n  };\n\n  return (\n    <div className=\"main-page\">\n      <FilterPanel\n        filters={filters}\n        onFiltersChange={setFilters}\n        onSearchClick={handleSearch}\n        languageOptions={languageOptions}\n        topicOptions={topicOptions}\n      />\n      <ResultsList repos={repos} loading={loading} />\n    </div>\n  );\n};\n\nexport default MainPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}